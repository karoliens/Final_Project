// <auto-generated />
using System;
using Final_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(RepairShopContext))]
    partial class RepairShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Final_Project.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Email = "karoliens@gmail.com",
                            Name = "Karolis",
                            PhoneNumber = "+37061212121"
                        },
                        new
                        {
                            ClientId = 2,
                            Email = "ievuzis@gmail.com",
                            Name = "Ieva",
                            PhoneNumber = "+37061252121"
                        },
                        new
                        {
                            ClientId = 3,
                            Email = "tomukas@gmail.com",
                            Name = "Tomas",
                            PhoneNumber = "+37061212128"
                        },
                        new
                        {
                            ClientId = 4,
                            Email = "sauliens@gmail.com",
                            Name = "Saulius",
                            PhoneNumber = "+37061215121"
                        });
                });

            modelBuilder.Entity("Final_Project.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            Model = "iPhone 7",
                            TicketId = 0,
                            Type = "Phone"
                        },
                        new
                        {
                            DeviceId = 2,
                            Model = "MacBook Pro",
                            TicketId = 0,
                            Type = "Laptop"
                        });
                });

            modelBuilder.Entity("Final_Project.Models.RepairCategory", b =>
                {
                    b.Property<int>("RepairCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RepairCategoryId");

                    b.ToTable("RepairCategories");

                    b.HasData(
                        new
                        {
                            RepairCategoryId = 1,
                            Name = "Data Recovery"
                        },
                        new
                        {
                            RepairCategoryId = 2,
                            Name = "Screen Replacement"
                        },
                        new
                        {
                            RepairCategoryId = 3,
                            Name = "Batery Replacement"
                        },
                        new
                        {
                            RepairCategoryId = 4,
                            Name = "Logic Board Repair"
                        });
                });

            modelBuilder.Entity("Final_Project.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");

                    b.HasData(
                        new
                        {
                            TechnicianId = 1,
                            Name = "Karolis"
                        },
                        new
                        {
                            TechnicianId = 2,
                            Name = "Artūras"
                        });
                });

            modelBuilder.Entity("Final_Project.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("TicketId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            ClientId = 0,
                            CreateDateTime = new DateTime(2023, 1, 12, 19, 44, 54, 308, DateTimeKind.Local).AddTicks(7523),
                            Description = "Reikia pakeisti iPhone 7 ekraną",
                            DeviceId = 0,
                            TechnicianId = 0,
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 2,
                            ClientId = 0,
                            CreateDateTime = new DateTime(2023, 1, 12, 19, 44, 54, 308, DateTimeKind.Local).AddTicks(7561),
                            Description = "Reikia pakeisti iPhone X bateriją",
                            DeviceId = 0,
                            TechnicianId = 0,
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 3,
                            ClientId = 0,
                            CreateDateTime = new DateTime(2023, 1, 12, 19, 44, 54, 308, DateTimeKind.Local).AddTicks(7564),
                            Description = "Reikia pakeisti SAMSUNG S20 ekraną",
                            DeviceId = 0,
                            TechnicianId = 0,
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 4,
                            ClientId = 0,
                            CreateDateTime = new DateTime(2023, 1, 12, 19, 44, 54, 308, DateTimeKind.Local).AddTicks(7567),
                            Description = "Reikia perlituoti PS5 pultelio krovimo lizdą",
                            DeviceId = 0,
                            TechnicianId = 0,
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RepairCategoryTicket", b =>
                {
                    b.Property<int>("RepairCategoriesRepairCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsTicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RepairCategoriesRepairCategoryId", "TicketsTicketId");

                    b.HasIndex("TicketsTicketId");

                    b.ToTable("RepairCategoryTicket");
                });

            modelBuilder.Entity("Final_Project.Models.Device", b =>
                {
                    b.HasOne("Final_Project.Models.Ticket", "Ticket")
                        .WithOne("Device")
                        .HasForeignKey("Final_Project.Models.Device", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Final_Project.Models.Ticket", b =>
                {
                    b.HasOne("Final_Project.Models.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_Project.Models.Technician", "Technician")
                        .WithMany("Tickets")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepairCategoryTicket", b =>
                {
                    b.HasOne("Final_Project.Models.RepairCategory", null)
                        .WithMany()
                        .HasForeignKey("RepairCategoriesRepairCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_Project.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final_Project.Models.Client", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Final_Project.Models.Technician", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Final_Project.Models.Ticket", b =>
                {
                    b.Navigation("Device");
                });
#pragma warning restore 612, 618
        }
    }
}
